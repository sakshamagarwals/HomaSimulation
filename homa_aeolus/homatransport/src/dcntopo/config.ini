[General]
#####Config#####
# sets the transport to "HomaTransport" and the parameters for that transport.

# simulation global configuration options
simtime-scale = -15
sim-time-limit = 100000ms
#sim-time-limit = 20ms
#cpu-time-limit = 1200s
cmdenv-express-mode = true
warmup-period = 0ms
network = DcnTopo
#network = IncastTopo
num-rngs = 1

##### Don't change the following config line. parseXMLConfig() ######
#### function in WorkloadSynthesizer class depends on this line. ####
**.host[*].trafficGeneratorApp[0].destAddresses = moduleListByPath("**.host[*]")

############# per module configuration ###############
# Note: if you modified any of the parameters under this section make sure to
# reflect appropriate changes to IPAddress assignment section in
# IPv4Configurator section in config.xml.
#DcnTopo.numServersPerTor = ${numServersPerTor = 16}
#DcnTopo.numTors = ${numTors = 9}
#DcnTopo.fabricLinkSpeed = ${fabricLinkSpeed = 40Gbps}
#DcnTopo.nicLinkSpeed = ${nicLinkSpeed = 10Gbps}
DcnTopo.numServersPerTor = ${numServersPerTor = 16}
DcnTopo.numTors = ${numTors = 9}
DcnTopo.fabricLinkSpeed = ${fabricLinkSpeed = 400Gbps}
DcnTopo.nicLinkSpeed = ${nicLinkSpeed = 100Gbps}
DcnTopo.edgeLinkDelay = ${edgeLinkDelay = 0.65us}
DcnTopo.fabricLinkDelay = ${fabricLinkDelay = 0.65us}
DcnTopo.hostSwTurnAroundTime = ${hostSwTurnAroundTime = 0.0us}
DcnTopo.hostNicSxThinkTime = ${hostNicSxThinkTime = 0.0us}
DcnTopo.switchFixDelay = ${switchFixDelay = 0.0us}
DcnTopo.isFabricCutThrough = ${isFabricCutThrough = false}

#IncastTopo.numServersPerTor = ${numServersPerTor = 130}
#IncastTopo.numTors = ${numTors = 1}
#IncastTopo.fabricLinkSpeed = ${fabricLinkSpeed = 100Gbps}
#IncastTopo.nicLinkSpeed = ${nicLinkSpeed = 100Gbps}
#IncastTopo.edgeLinkDelay = ${edgeLinkDelay = 0.0us}
#IncastTopo.fabricLinkDelay = ${fabricLinkDelay = 0.0us}
#IncastTopo.hostSwTurnAroundTime = ${hostSwTurnAroundTime = 0.5us}
#IncastTopo.hostNicSxThinkTime = ${hostNicSxThinkTime = 0.5us}
#IncastTopo.switchFixDelay = ${switchFixDelay = 0.25us}
#IncastTopo.isFabricCutThrough = ${isFabricCutThrough = false}
**.host[*].numTrafficGeneratorApp = 1
**.eth[*].queueType = "DropTailQueue"

######################## Homa Transport Parameters ###############################
#rttBytes is computed as sending one full packet in one way and a grant in the other way.
**.host[*].**.rttBytes = ${RTT = 35000} B ##35000B is the rttBytes (ie. rtt*nicLinkSpeed).
**.host[*].transportSchemeType = "${transportSchemeType = HomaTransport}"
**.host[*].transportScheme.isRoundRobinScheduler = ${isRoundRobinScheduler = false}
**.host[*].transportScheme.useUnschRateInScheduler = ${useUnschRateInScheduler = false}
**.host[*].transportScheme.maxOutstandingRecvBytes = ${maxOutstandingRecvBytes = $RTT} B
# Possible string values: STATIC_CBF_UNIFORM, STATIC_CDF_UNIFORM, STATIC_CBF_GRADUATED
**.host[*].transportScheme.unschedPrioResolutionMode = "${unschedPrioResolutionMode = STATIC_CBF_UNIFORM}"
# Possible values 1.0/2.0, 2.0/3.0, 4.0/3.0. Lower number, mean higher priorities carry more traffic
**.host[*].transportScheme.unschedPrioUsageWeight = ${unschedPrioUsageWeight = 1}
**.host[*].transportScheme.cbfCapMsgSize = "${cbfCapMsgSize = $RTT}"
**.host[*].transportScheme.boostTailBytesPrio = "${boostTailBytesPrio = $RTT}"
**.host[*].transportScheme.defaultReqBytes = ${defaultReqBytes = 1442 }B
**.host[*].transportScheme.defaultUnschedBytes = ${defaultUnschedBytes = 33000 }B
**.host[*].transportScheme.senderScheme = "${senderScheme = SRBF}" #Possible values: OBSERVE_PKT_PRIOS, SRBF
**.host[*].transportScheme.accountForGrantTraffic = ${accountForGrantTraffic = true}
**.host[*].transportScheme.linkCheckBytes = ${linkCheckBytes = -1}B
**.host[*].transportScheme.localPort = 2222
**.host[*].transportScheme.destPort = 2222
**.host[*].transportScheme.enableAeolus = ${enableAeolus = true}
**.eth[*].**.transportType = "HomaTransport"
#**.realLoadFactor = ${rlf=0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.73, 0.77, 0.8, 0.83, 0.87, 0.9}
#**.realLoadFactor = ${rlf=0.6, 0.6, 0.6, 0.6, 0.6}
**.realLoadFactor = ${rlf=0.5, 0.6, 0.7, 0.8, 0.9}

#result-dir = results/testing/unschedPrio/LoadFactor__${rlf}--UnschedResolutionMode__${unschedPrioResolutionMode}--boostTailBytesPrio__${boostTailBytesPrio}


[Config RecordAllStats]
#enable vector recording for globalListener
#**.globalListener.**.result-recording-modes = all
#**.globalListener.**.vector-recording = true


#disable vector recording for all other modules
#**.vector-recording = false

#WorkloadSynthesizer stats, only non templated ones are enabled
#**.trafficGeneratorApp[*].sentMsg.result-recording-modes = all
#**.trafficGeneratorApp[*].rcvdMsg.result-recording-modes = all

**.trafficGeneratorApp[*].msgE2EDelay.result-recording-modes = all
**.trafficGeneratorApp[*].msgE2EDelay.vector-recording = true

**.trafficGeneratorApp[*].allmsgE2EDelay.result-recording-modes = all
**.trafficGeneratorApp[*].allmsgE2EDelay.vector-recording = true

#**.trafficGeneratorApp[*].KBMsgSend.result-recording-modes = all
#**.trafficGeneratorApp[*].KBMsgSend.vector-recording = true

**.trafficGeneratorApp[*].KBMsgReceived.result-recording-modes = all
**.trafficGeneratorApp[*].KBMsgReceived.vector-recording = true

#**.trafficGeneratorApp[*].KBMsgSendBytes.result-recording-modes = all
#**.trafficGeneratorApp[*].KBMsgSendBytes.vector-recording = true
#**.trafficGeneratorApp[*].KBMsgReceivedBytes.result-recording-modes = all
#**.trafficGeneratorApp[*].KBMsgReceivedBytes.vector-recording = true

#**.trafficGeneratorApp[*].**.result-recording-modes = all


#HomaTransport stats
#**.transportScheme.**.result-recording-modes = all
**.transportScheme.throughPut.result-recording-modes = all
**.transportScheme.throughPut.vector-recording = true

**.transportScheme.goodputSize.result-recording-modes = all
**.transportScheme.goodputSize.vector-recording = true

**.transportScheme.KBMsgSend.result-recording-modes = all
**.transportScheme.KBMsgSend.vector-recording = true

#EthernetMac stats
#**.mac.txPk.result-recording-modes = all
#**.mac.rxPkOk.result-recording-modes = all
#**.mac.frameRcvdTimeStamptAtMAC.result-recording-modes = all
#**.mac.frameSentTimeStamptAtMAC.result-recording-modes = all

#DropTailQueue stats
#**.dataQueue.rcvdPk.result-recording-modes = all
#**.dataQueue.queueLength.result-recording-modes = all
#**.dataQueue.queueByteLength.result-recording-modes = all
#**.dataQueue.queueingTime.result-recording-modes = all
#**.dataQueue.requestQueueingTime.result-recording-modes = all
#**.dataQueue.grantQueueingTime.result-recording-modes = all
#**.dataQueue.schedDataQueueingTime.result-recording-modes = all
#**.dataQueue.unschedDataQueueingTime.result-recording-modes = all

# Exclude every other stats from recording
**.result-recording-modes = -

[Config WorkloadIMC10]
extends = RecordAllStats
**.host[*].trafficGeneratorApp[*].typename = "WorkloadSynthesizer"
**.host[*].**.workloadType = "${workloadType = PRESET_IN_FILE}"
**.host[*].trafficGeneratorApp[*].msgSizeRanges = "${msgSizeRanges =3038294}"
**.host[*].trafficGeneratorApp[*].loadFactor = ${loadFactor = $rlf*0.898}
**.host[*].trafficGeneratorApp[*].interArrivalDist = "${interArrivalDist = preset_in_file}"
**.host[*].trafficGeneratorApp[*].flowSizeFileName = "HostidSizeInterarrival.txt"
**.host[*].trafficGeneratorApp[*].startTime = ${startTime = 0s}
**.host[*].trafficGeneratorApp[*].workloadFile = "${workloadFile = fb_100/trace_homa_aditya_5.txt.csv, fb_100/trace_homa_aditya_6.txt.csv, fb_100/trace_homa_aditya_7.txt.csv, fb_100/trace_homa_aditya_8.txt.csv, fb_100/trace_homa_aditya_9.txt.csv ! rlf}"
**.host[*].trafficGeneratorApp[*].resultFile = "${resultFile = fb_100/result_homa_aditya_5.txt.csv, fb_100/result_homa_aditya_6.txt.csv, fb_100/result_homa_aditya_7.txt.csv, fb_100/result_homa_aditya_8.txt.csv, fb_100/result_homa_aditya_9.txt.csv ! rlf}"
**.host[*].trafficGeneratorApp[*].stopTime = ${stopTime = 0.22s, 0.18s, 0.16s, 0.139s, 0.1239s ! rlf}
#**.host[*].trafficGeneratorApp[*].stopTime = ${stopTime =  0.1s, 0.1s, 0.1s, 0.1s, 0.1s ! rlf}
#**.host[*].trafficGeneratorApp[*].stopTime = ${stopTime =  0.1s ! rlf}

#**.host[*].trafficGeneratorApp[*].stopTime = ${stopTime =  0.1s, 0.1s, 0.1s, 0.1s, 0.1s, 0.1s, 0.1s, 0.1s, 0.1s, 0.1s, 0.1s, 0.1s ! rlf}
seed-set = ${repetition}
seed-0-mt = ${seedInd = 0..4 ! rlf}
#seed-0-mt = ${seedInd = 0..11 ! rlf}

**.host[*].transportScheme.prioLevels = ${prioLevels = 8}
**.host[*].transportScheme.adaptiveSchedPrioLevels = ${adaptiveSchedPrioLevels = 7}
**.host[*].transportScheme.numSendersToKeepGranted = ${numSendersToKeepGranted = 6}
**.host[*].transportScheme.prioResolverPrioLevels = ${prioResolverPrioLevels = $prioLevels-$adaptiveSchedPrioLevels}
result-dir = results/manyReceivers/comparison/linkCheckBytes_IMC10_newtable_avfct_${rlf}

[Config WorkloadDataMining]
extends = RecordAllStats
**.host[*].trafficGeneratorApp[*].typename = "WorkloadSynthesizer"
**.host[*].**.workloadType = "${workloadType = PRESET_IN_FILE}"
**.host[*].trafficGeneratorApp[*].msgSizeRanges = "${msgSizeRanges =961333814}"
**.host[*].trafficGeneratorApp[*].loadFactor = ${loadFactor = $rlf*0.898}
**.host[*].trafficGeneratorApp[*].interArrivalDist = "${interArrivalDist = preset_in_file}"
**.host[*].trafficGeneratorApp[*].flowSizeFileName = "HostidSizeInterarrival.txt"
**.host[*].trafficGeneratorApp[*].startTime = ${startTime = 0s}
**.host[*].trafficGeneratorApp[*].workloadFile = "${workloadFile = fb_100/trace_homa_datamining_5.txt.csv, fb_100/trace_homa_datamining_6.txt.csv, fb_100/trace_homa_datamining_7.txt.csv, fb_100/trace_homa_datamining_8.txt.csv, fb_100/trace_homa_datamining_9.txt.csv ! rlf}"
**.host[*].trafficGeneratorApp[*].resultFile = "${resultFile = fb_100/result_homa_datamining_5.txt.csv, fb_100/result_homa_datamining_6.txt.csv, fb_100/result_homa_datamining_7.txt.csv, fb_100/result_homa_datamining_8.txt.csv, fb_100/result_homa_datamining_9.txt.csv ! rlf}"
**.host[*].trafficGeneratorApp[*].stopTime = ${stopTime = 8.53s, 7.1s, 6.09s, 5.33s, 4.74s ! rlf}
#**.host[*].trafficGeneratorApp[*].stopTime = ${stopTime =  0.1s, 0.1s, 0.1s, 0.1s, 0.1s ! rlf}
#**.host[*].trafficGeneratorApp[*].stopTime = ${stopTime =  0.1s ! rlf}

#**.host[*].trafficGeneratorApp[*].stopTime = ${stopTime =  0.1s, 0.1s, 0.1s, 0.1s, 0.1s, 0.1s, 0.1s, 0.1s, 0.1s, 0.1s, 0.1s, 0.1s ! rlf}
seed-set = ${repetition}
seed-0-mt = ${seedInd = 0..4 ! rlf}
#seed-0-mt = ${seedInd = 0..11 ! rlf}

**.host[*].transportScheme.prioLevels = ${prioLevels = 8}
**.host[*].transportScheme.adaptiveSchedPrioLevels = ${adaptiveSchedPrioLevels = 7}
**.host[*].transportScheme.numSendersToKeepGranted = ${numSendersToKeepGranted = 7}
**.host[*].transportScheme.prioResolverPrioLevels = ${prioResolverPrioLevels = $prioLevels-$adaptiveSchedPrioLevels}
result-dir = results/manyReceivers/comparison/linkCheckBytes_DataMining_newtable_avfct_${rlf}

[Config TestDist]
extends = RecordAllStats
**.host[*].trafficGeneratorApp[*].typename = "WorkloadSynthesizer"
**.host[*].**.workloadType = "${workloadType = TEST_DIST}"
**.host[*].trafficGeneratorApp[*].msgSizeRanges = "${msgSizeRanges = 100 1000 10000 100000 1000000 10000000}"
**.host[*].trafficGeneratorApp[*].loadFactor = ${loadFactor= 0.484375, 0.775}
**.host[*].trafficGeneratorApp[*].interArrivalDist = "${interArrivalDist = exponential}"
**.host[*].trafficGeneratorApp[*].startTime = ${startTime = 0s}
**.host[*].trafficGeneratorApp[*].stopTime = ${stopTime = 10s, 5s ! loadFactor}
seed-set = ${repetition}
seed-0-mt = ${seedInd = 0..1 ! loadFactor}

[Config InFileDist]
extends = RecordAllStats
**.host[*].trafficGeneratorApp[*].typename = "WorkloadSynthesizer"
**.host[*].**.workloadType = "${workloadType = PRESET_IN_FILE}"
**.host[*].trafficGeneratorApp[*].msgSizeRanges = "${msgSizeRanges = 100 1000 10000 100000 1000000 10000000}"
# **.host[*].trafficGeneratorApp[*].msgSizeRanges = "${msgSizeRanges = 100 50000}"
**.host[*].trafficGeneratorApp[*].flowSizeFileName = "HostidSizeInterarrival.txt"
**.host[*].trafficGeneratorApp[*].loadFactor = ${loadFactor= 0.484375, 0.775}
**.host[*].trafficGeneratorApp[*].interArrivalDist = "${interArrivalDist = preset_in_file}"
**.host[*].trafficGeneratorApp[*].workloadFile = "${workloadFile = traces/test-trace.txt.homa}"
**.host[*].trafficGeneratorApp[*].resultFile = "${resultFile = fcts.txt}"
**.host[*].trafficGeneratorApp[*].startTime = ${startTime = 0s}
**.host[*].trafficGeneratorApp[*].stopTime = ${stopTime = 50s}
seed-set = ${repetition}
seed-0-mt = ${seedInd = 0}
**.host[*].transportScheme.prioLevels = ${prioLevels = 8}
**.host[*].transportScheme.adaptiveSchedPrioLevels = ${adaptiveSchedPrioLevels =      7  }
**.host[*].transportScheme.numSendersToKeepGranted = ${numSendersToKeepGranted = 6}
**.host[*].transportScheme.prioResolverPrioLevels = ${prioResolverPrioLevels = $prioLevels-$adaptiveSchedPrioLevels}
result-dir = results/manyReceivers/comparison/linkCheckBytes__${linkCheckBytes}


